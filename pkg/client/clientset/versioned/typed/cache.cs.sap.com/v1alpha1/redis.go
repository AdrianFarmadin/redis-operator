/*
SPDX-FileCopyrightText: 2024 SAP SE or an SAP affiliate company and redis-operator contributors
SPDX-License-Identifier: Apache-2.0
*/

// Code generated by client-gen. DO NOT EDIT.

package v1alpha1

import (
	context "context"

	cachecssapcomv1alpha1 "github.com/sap/redis-operator/api/v1alpha1"
	scheme "github.com/sap/redis-operator/pkg/client/clientset/versioned/scheme"
	v1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	types "k8s.io/apimachinery/pkg/types"
	watch "k8s.io/apimachinery/pkg/watch"
	gentype "k8s.io/client-go/gentype"
)

// RedisGetter has a method to return a RedisInterface.
// A group's client should implement this interface.
type RedisGetter interface {
	Redis(namespace string) RedisInterface
}

// RedisInterface has methods to work with Redis resources.
type RedisInterface interface {
	Create(ctx context.Context, redis *cachecssapcomv1alpha1.Redis, opts v1.CreateOptions) (*cachecssapcomv1alpha1.Redis, error)
	Update(ctx context.Context, redis *cachecssapcomv1alpha1.Redis, opts v1.UpdateOptions) (*cachecssapcomv1alpha1.Redis, error)
	// Add a +genclient:noStatus comment above the type to avoid generating UpdateStatus().
	UpdateStatus(ctx context.Context, redis *cachecssapcomv1alpha1.Redis, opts v1.UpdateOptions) (*cachecssapcomv1alpha1.Redis, error)
	Delete(ctx context.Context, name string, opts v1.DeleteOptions) error
	DeleteCollection(ctx context.Context, opts v1.DeleteOptions, listOpts v1.ListOptions) error
	Get(ctx context.Context, name string, opts v1.GetOptions) (*cachecssapcomv1alpha1.Redis, error)
	List(ctx context.Context, opts v1.ListOptions) (*cachecssapcomv1alpha1.RedisList, error)
	Watch(ctx context.Context, opts v1.ListOptions) (watch.Interface, error)
	Patch(ctx context.Context, name string, pt types.PatchType, data []byte, opts v1.PatchOptions, subresources ...string) (result *cachecssapcomv1alpha1.Redis, err error)
	RedisExpansion
}

// redis implements RedisInterface
type redis struct {
	*gentype.ClientWithList[*cachecssapcomv1alpha1.Redis, *cachecssapcomv1alpha1.RedisList]
}

// newRedis returns a Redis
func newRedis(c *CacheV1alpha1Client, namespace string) *redis {
	return &redis{
		gentype.NewClientWithList[*cachecssapcomv1alpha1.Redis, *cachecssapcomv1alpha1.RedisList](
			"redis",
			c.RESTClient(),
			scheme.ParameterCodec,
			namespace,
			func() *cachecssapcomv1alpha1.Redis { return &cachecssapcomv1alpha1.Redis{} },
			func() *cachecssapcomv1alpha1.RedisList { return &cachecssapcomv1alpha1.RedisList{} },
		),
	}
}
